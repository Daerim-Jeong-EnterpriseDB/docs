{% extends "platformBase/" + platformBaseTemplate + '.njk' %}
{% set packageName = packageName or 'edb-postgresextended<xx>-server edb-postgresextended<xx>-contrib' %}
{% set packageName = packageName | replace('<xx>', product.version) %}
{% import "platformBase/_deploymentConstants.njk" as deploy %}
{% block frontmatter %}
{# 
  If you modify deployment path here, please first copy the old expression
  and add it to the list under "redirects:" below - this ensures we don't 
  break any existing links.  
#}
deployPath: pge/{{ product.version }}/installing/linux_{{platform.arch}}/pge_{{deploy.map_platform[platform.name]}}.mdx
redirects:
{% endblock frontmatter %}
{% block installCommand %}
{{super()}}
{% endblock installCommand %}
{% block postinstall %}

## Initial configuration
{% block debian_ubuntu %}
Getting started with your cluster involves logging in, ensuring the installation and initial configuration was successful, connecting to your cluster, and creating the user password. 

First, you need to initialize and start the database cluster. The `edb-pge-{{ product.version | replace(".", "") }}-setup` script creates a cluster.

```shell
sudo PGSETUP_INITDB_OPTIONS="-E UTF-8" /usr/edb/pge{{ product.version }}/bin/edb-pge-{{ product.version | replace(".", "") }}-setup initdb

sudo systemctl start edb-pge-{{ product.version }}
```
{% endblock debian_ubuntu %}

To work in your cluster, log in as the postgres user. Connect to the database server using the psql command-line client. Alternatively, you can use a client of your choice with the appropriate connection string. 

```shell
sudo -iu postgres

psql postgres
```

The server runs with the `peer` or `ident` permission by default. You can change the authentication method by modifying the `pg_hba.conf` file.

{# this is kinda awful, but gotta deal with the reorg somehow... --jh #}
Before changing the authentication method, assign a password to the database superuser, postgres. For more information on changing the authentication, see [Modifying the pg_hba.conf file](../../administration/01_setting_configuration_parameters/#modifying-the-pg_hbaconf-file).

```sql
ALTER ROLE postgres with PASSWORD 'password';
```

## Experiment

Now you're ready to create and connect to a database, create a table, insert data in a table, and view the data from the table. 

First, use psql to create a database named `hr` to hold human resource information.

```sql
# running in psql 
CREATE DATABASE hr;
__OUTPUT__
CREATE DATABASE
```

Connect to the `hr` database inside psql:

```
\c hr
__OUTPUT__
You are now connected to database "hr" as user "postgres".
```

Create columns to hold department numbers, unique department names, and locations:

```
CREATE TABLE public.dept (deptno numeric(2) NOT NULL CONSTRAINT dept_pk
PRIMARY KEY, dname varchar(14) CONSTRAINT dept_dname_uq UNIQUE, loc
varchar(13));
__OUTPUT__
CREATE TABLE
```

Insert values into the `dept` table:

```
INSERT INTO dept VALUES (10,'ACCOUNTING','NEW YORK');
__OUTPUT__
INSERT 0 1
```

```
INSERT into dept VALUES (20,'RESEARCH','DALLAS');
__OUTPUT__
INSERT 0 1
```

View the table data by selecting the values from the table:

```
SELECT * FROM dept;
__OUTPUT__
deptno  |   dname    |   loc
--------+------------+----------
10      | ACCOUNTING | NEW YORK
20      | RESEARCH   | DALLAS
(2 rows)
```

{% endblock postinstall %}